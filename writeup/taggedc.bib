@article{Denning77:SecureInformationFlow,
author = {Denning, Dorothy E. and Denning, Peter J.},
title = {Certification of Programs for Secure Information Flow},
year = {1977},
issue_date = {July 1977},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {20},
number = {7},
issn = {0001-0782},
url = {https://doi.org/10.1145/359636.359712},
doi = {10.1145/359636.359712},
abstract = {ertification mechanism for verifying the secure flow of information through a program. Because it exploits the properties of a lattice structure among security classes, the procedure is sufficiently simple that it can easily be included in the analysis phase of most existing compilers. Appropriate semantics are presented and proved correct. An important application is the confinement problem: The mechanism can prove that a program cannot cause supposedly nonconfidential results to depend on confidential input data.},
journal = {Commun. ACM},
month = {jul},
pages = {504–513},
numpages = {10},
keywords = {program certification, confinement, information flow, security, lattice, protection, security classes}
}

@inproceedings{Chhak21:Tagine,
author = {Chhak, CHR and Tolmach, Andrew and Anderson, Sean},
title = {Towards Formally Verified Compilation of Tag-Based Policy Enforcement},
year = {2021},
isbn = {9781450382991},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3437992.3439929},
doi = {10.1145/3437992.3439929},
abstract = {Hardware-assisted reference monitoring is receiving increasing attention as a way to improve the security of existing software. One example is the PIPE architecture extension, which attaches metadata tags to register and memory values and executes tag-based rules at each machine instruction to enforce a software-defined security policy. To use PIPE effectively, engineers should be able to write security policies in terms of source-level concepts like functions, local variables, and structured control operators, which are not visible at machine level. It is the job of the compiler to generate PIPE-aware machine code that enforces these source-level policies. The compiler thus becomes part of the monitored system’s trusted computing base---and hence a prime candidate for verification. To formalize compiler correctness in this setting, we extend the source language semantics with its own form of user-specified tag-based monitoring, and show that the compiler preserves that monitoring behavior. The challenges of compilation include mapping source-level monitoring policies to instruction-level tag rules, preserving fail-stop behaviors, and satisfying the surprisingly complex preconditions for conventional optimizations. In this paper, we describe the design and verification of Tagine, a small prototype compiler that translates a simple tagged WHILE language to a tagged register transfer language and performs simple optimizations. Tagine is based on the RTLgen and Deadcode phases of the CompCert compiler, and hence is written and verified in Coq. This work is a first step toward verification of a full-scale compiler for a realistic tagged source language.},
booktitle = {Proceedings of the 10th ACM SIGPLAN International Conference on Certified Programs and Proofs},
pages = {137–151},
numpages = {15},
keywords = {tag-based secure hardware, reference monitors, verified compilers, Coq proof assistant},
location = {Virtual, Denmark},
series = {CPP 2021}
}

@techreport{Anderson72:PlanningStudy,
  added-at = {2014-05-27T19:25:15.000+0200},
  author = {Anderson, James P.},
  biburl = {https://www.bibsonomy.org/bibtex/25573401b3a88058a07c519b6b6e19bde/privtec},
  institution = {U.S. Air Force Electronic Systems Division},
  month = {10},
  title = {{C}omputer {S}ecurity {T}echnology {P}lanning {S}tudy},
  volume = 2,
  year = 1972
}

@inproceedings{Goguen82:SecurityPolicies,
  added-at = {2016-06-15T00:00:00.000+0200},
  author = {Goguen, Joseph A. and Meseguer, José},
  booktitle = {IEEE Symposium on Security and Privacy},
  crossref = {conf/sp/1982},
  ee = {http://doi.ieeecomputersociety.org/10.1109/SP.1982.10014},
  isbn = {0-8186-0410-7},
  keywords = {dblp},
  pages = {11-20},
  publisher = {IEEE Computer Society},
  title = {Security Policies and Security Models.},
  url = {http://dblp.uni-trier.de/db/conf/sp/sp1982.html#GoguenM82a},
  year = 1982
}



